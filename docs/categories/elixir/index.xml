<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixir on IO.blog</title>
    <link>https://cultofmetatron.github.io/cultofmetatron.io/categories/elixir/</link>
    <description>Recent content in Elixir on IO.blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Apr 2017 17:02:46 -0400</lastBuildDate>
    
	<atom:link href="https://cultofmetatron.github.io/cultofmetatron.io/categories/elixir/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thinking in Ecto - schemas and changesets</title>
      <link>https://cultofmetatron.github.io/cultofmetatron.io/post/thinking-in-ecto-p1/</link>
      <pubDate>Sat, 22 Apr 2017 17:02:46 -0400</pubDate>
      
      <guid>https://cultofmetatron.github.io/cultofmetatron.io/post/thinking-in-ecto-p1/</guid>
      <description>Note: I&amp;rsquo;m basing much of this code paths on the new phoenix 1.3 RC1.
 I started writing elixir 6 months ago and it&amp;rsquo;s been pure love. Ecto specifically, makes developing saas applications a real joy.
Ecto is the database abstraction layer for elixir and comes baked into phoenix. Unlike an ORM like activerecord or rails, ecto provides a set of macros that expose a dsl layer for operating on your database similar to .</description>
    </item>
    
    <item>
      <title>Auth0 on Phoenix - Basic Configuration</title>
      <link>https://cultofmetatron.github.io/cultofmetatron.io/post/auth0-on-phoenix-p1/</link>
      <pubDate>Wed, 01 Mar 2017 00:19:51 -0500</pubDate>
      
      <guid>https://cultofmetatron.github.io/cultofmetatron.io/post/auth0-on-phoenix-p1/</guid>
      <description>&lt;p&gt;Today I&amp;rsquo;m documenting the process of setting up &lt;a href=&#34;https://auth0.com/&#34;&gt;Auth0&lt;/a&gt; and &lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack2&lt;/a&gt; on a newly created &lt;a href=&#34;http://www.phoenixframework.org/&#34;&gt;Phoenix&lt;/a&gt; project
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>10 reasons you should bet on elixir for your next startup</title>
      <link>https://cultofmetatron.github.io/cultofmetatron.io/post/10-reasons-you-should-bet-on-elixir/</link>
      <pubDate>Mon, 02 Jan 2017 00:18:23 -0500</pubDate>
      
      <guid>https://cultofmetatron.github.io/cultofmetatron.io/post/10-reasons-you-should-bet-on-elixir/</guid>
      <description>&lt;p&gt;Everything we touch on a computer is just 1&amp;rsquo;s and 0&amp;rsquo;s. Yet, its easy to forget that with all the libraries we have to abstract away the innate complexity of the myriad of protocols that form the backbone of the internet.

Elixir itself has really nice built in primatives for dealing with binary streams. Before I go into that, lets cover some background.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elixir first impressions</title>
      <link>https://cultofmetatron.github.io/cultofmetatron.io/post/elixir-first-impressions/</link>
      <pubDate>Mon, 02 Jan 2017 00:13:42 -0500</pubDate>
      
      <guid>https://cultofmetatron.github.io/cultofmetatron.io/post/elixir-first-impressions/</guid>
      <description>&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#to-start-a-new-project&#34;&gt;To start a new project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#built-in-data-structures&#34;&gt;Built in data structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-and-cond&#34;&gt;case and cond&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;

&lt;p&gt;Software engineering is a game of tradeoffs.
Both for building systems that serve our users with reliability and cost that keeps us in buisness. I&amp;rsquo;ve delved into learning Elixir as a new toolkit for developing software and experiences with more reliablity and less downtime.
Elixir is a langugae that runs on top of the Erlang VM. While still young for a langugae, it has the benefit of leveraging the Erlang platform; a best of breed high performance system developed at Ericson to run cellphone and telecom operations running with minimal downtime.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>concurrency by message passing in elixir</title>
      <link>https://cultofmetatron.github.io/cultofmetatron.io/post/concurrency-by-message-passing-in-elixir/</link>
      <pubDate>Fri, 02 Dec 2016 00:15:41 -0500</pubDate>
      
      <guid>https://cultofmetatron.github.io/cultofmetatron.io/post/concurrency-by-message-passing-in-elixir/</guid>
      <description>&lt;p&gt;In my last post, I talked about Elixir&amp;rsquo;s core syntax. While I love the brevity and pure functional style favored in elixir, I didn&amp;rsquo;t even touch on it primary value added proposition.

Elixir is really a process oriented programming langauge.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>binary streams in elixr</title>
      <link>https://cultofmetatron.github.io/cultofmetatron.io/post/binary-streams-in-elixr/</link>
      <pubDate>Wed, 02 Mar 2016 00:16:51 -0500</pubDate>
      
      <guid>https://cultofmetatron.github.io/cultofmetatron.io/post/binary-streams-in-elixr/</guid>
      <description>&lt;p&gt;Everything we touch on a computer is just 1&amp;rsquo;s and 0&amp;rsquo;s. Yet, its easy to forget that with all the libraries we have to abstract away the innate complexity of the myriad of protocols that form the backbone of the internet.

Elixir itself has really nice built in primatives for dealing with binary streams. Before I go into that, lets cover some background.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>